metacaracteres = | & ; ( ) < >

read input
breaks input into words and operators obeying the quoting rule
tokens separated by metacharacters
heredoc
alias expansion
parse tokens into simple and compound commands (not doing compounds tho pls)
shell expansions
filename expansion
list of filenames commands and arguments
performs pipes
performs redirections
removes redirection operators and operands from list
executes command
wait for the command to complete
exit status is last command executed status


quoting rule !
\ -> considers the next character as it is
' -> preserves values
" -> preserves values EXCEPT $ ` \ and ! (hate it)
|-> $ and ` are the same and basically !
|-> pour le \, il n'agit normalement que devant $ ` " \ et nl, sinon il apparait
('echo \n' affiche n, 'echo "\n"' affiche \n)
* and @ are special parameters
$'string' -> backslashed characters follow C standard (\n = nl)

reserved words !
if then elif else fi time for in until while do done case esac coproc select function { } [[ ]] !

&& : cmd1 && cmd2 -> cmd2 executes ssi cmd1 returns 0
|| : cmd1 || cmd2 -> cmd2 executes ssi cmd2 ne return pas 0

variables definies :
a= (a = 0)
a=12 (a = 12)
a+=3 (a = 123) (strjoin)
b+=l (b = l)

$0 : shell name
$? : last status
$$ : pid of shell (no getpid :( )

tilde expansion
~ = $HOME/ (si HOME unset, /home/$USERNAME/, sinon /home/)

then parameter expansion
brackets can be good
$a = ${a}
${a-lol} : si a est unset, renvoie lol
${a:=lol} : si a est unset ou nul, renvoie lol, et assigne lol Ã  a
${a:?lol} : si a est unset ou nul, ecrit lol dans la sortie d'erreur
${a:+lol} : si a est set et non nul, renvoie lol
${#a} : renvoie la longuer de a

then command substitution
but maybe not as it requires subshells so i dont think we can

then arithmetic expansion
but i dont think we want to recreate a full f-ing calculator

then filename expansion and pattern matching
* all files
? all files with one single character

then quote removal

then redirections ! (great band)
de base STDIN et STDOUT (duh)
soit < filename et > filename
soit <&file_descriptor >&file_descriptor
si n<filename, alors n sera le file descriptor copie (marche aussi pour les autres redirections)
>> append a la fin

here_docs
<< lol
<< l"o"l recherchera lol et non pas l"o"l !

and finally execution
which means...
COMMAND EXPANSION !
Variable assignements will be done after processing
if words remain after shell expansion above, the first word is the name of the command
redirections are performed
variable assignements ig (dont get it)

the shell now searches for the command
if there are nos slashes, shell function ?
if not, then maybe shell builtin ?
if neither, then searches in $PATH
if search successful or there are slashes, tries to execute it
if fails, it is a shell script and tries to execute it as is

registers command path in $_ in env

exit status is value return of waitpid
command not found = 127
command not executable = 126
registers exit status in $? in env
